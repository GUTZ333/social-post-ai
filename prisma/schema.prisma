generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_PRISMA_URL")
}

// =======================
// Usuário (Better Auth)
// =======================

model profiles {
  profile_id            String    @id @default(uuid())
  profile_auth_username          String    @db.Text
  profile_auth_mail         String    @unique
  profile_auth_mail_verified Boolean   @default(false)
  profile_avatar_url         String?   @db.Text
  profile_auth_birth_date     DateTime
  profile_created_at     DateTime  @default(now())
  profile_updated_at     DateTime  @updatedAt

// auth
  sessions      Session[]
  accounts      Account[]
// projec
  workSpaces    WorkSpace[]
  contents      Content[]

  @@map("profiles")
}

// =======================
// Contas OAuth / Better Auth
// =======================

model Account {
  account_id          String    @id @default(uuid())
  profile_id              String
  profile                profiles      @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  provider_id String
  account_access_token        String?
  account_refresh_token       String?
  account_expires_at          Int?
  account_token_type          String?
  account_scope               String?
  id_token            String?
  session_state       String?

  account_created_at DateTime @default(now())
  account_updated_at DateTime @updatedAt

  @@unique([ provider_id, profile_id ])
  @@map("accounts")
}

// =======================
// Workspaces
// =======================

model WorkSpace {
  workspace_id         String   @id @default(uuid())
  workspace_name       String
  workspace_created_at DateTime @default(now())
  workspace_updated_at DateTime @updatedAt

  profile_id String
  profile   profiles   @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  contents Content[]

  @@map("workspaces")
}

// =======================
// Conteúdos
// =======================

model Content {
  content_id         String   @id @default(uuid())
  content_prompt     String
  content_text       String?
  content_image      String?
  content_created_at DateTime @default(now())
  content_updated_at DateTime @updatedAt

  profile_id      String
  profile        profiles      @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  workspaceId String
  workspace   WorkSpace @relation(fields: [workspaceId], references: [workspace_id], onDelete: Cascade)

  @@map("contents")
}

// =======================
// Sessions (Better Auth)
// =======================

model Session {
  session_id        String   @id
  session_expires_at DateTime
  session_token     String   @unique
  session_created_at DateTime @default(now())
  session_updated_at DateTime @updatedAt
  session_ip_address String?  @db.Text
  profile_agent String?  @db.Text
  profile_id    String
  profile      profiles     @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)

  @@map("sessions")
}

// =======================
// Verification (Better Auth)
// =======================

model Verification {
  verificaton_id         String    @id
  verificiation_identifier String    @db.Text
  verification_value      String    @db.Text
  verification_expiresAt  DateTime
  verification_created_at  DateTime? @default(now())
  verification_updated_at  DateTime?

  @@map("verifications")
}