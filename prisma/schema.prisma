generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_PRISMA_URL")
}

// Tabela principal de usuários
model Profile {
  profile_id            String    @id @default(uuid())
  profile_auth_username String
  profile_auth_mail     String    @unique
  profile_auth_pass     String?   @db.Text // opcional, só se usar credentials
  profile_birth_date    DateTime  @db.Date
  profile_avatar_url    String?
  profile_created_at    DateTime  @default(now())
  profile_updated_at    DateTime  @updatedAt
  profile_provider      Providers

  WorkSpace WorkSpace[]
  Content   Content[]
  Accounts  Account[] // relação com OAuth

  @@map("profiles")
}

// Tabela para OAuth (Google, Instagram)
model Account {
  account_id          String   @id @default(uuid())
  profile_id          String
  provider            Providers
  provider_account_id String
  access_token        String?
  refresh_token       String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  profile Profile @relation(fields: [profile_id], references: [profile_id])

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

// Workspaces do usuário
model WorkSpace {
  workspace_id         String   @id @default(uuid())
  workspace_name       String
  workspace_created_at DateTime @default(now())
  workspace_updated_at DateTime @updatedAt

  profile_id String
  profile    Profile   @relation(fields: [profile_id], references: [profile_id])
  Content    Content[]

  @@map("workspaces")
}

// Conteúdos dentro do workspace
model Content {
  content_id         String   @id @default(uuid())
  content_prompt     String
  content_text       String?
  content_image      String?
  content_created_at DateTime @default(now())
  content_updated_at DateTime @updatedAt

  profile_id   String
  profile      Profile @relation(fields: [profile_id], references: [profile_id])

  workspace_id String
  workspace    WorkSpace @relation(fields: [workspace_id], references: [workspace_id])

  @@map("contents")
}

// Enum de provedores
enum Providers {
  Google
  InstaGram
  credentials
}
